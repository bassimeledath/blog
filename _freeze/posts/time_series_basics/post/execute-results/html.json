{
  "hash": "f7a42d11af97a49143fc402f6ef3d51d",
  "result": {
    "markdown": "---\ntitle: 'Paper Summary: Causal Inference and Uplift Modeling A review of the literature'\ndate: last-modified\ncategories: ['123', 'Second Tag']\ndescription: 'This is a python post'\nexecute: \n  message: false\n  warning: false\neditor_options: \n  chunk_output_type: console\n---\n\n## Introduction to time series data\n\nTime series data is any sequence of data points indexed in time order. It is a very common type of data in the real world. For example, the stock price of a company, the temperature of a city, the number of visitors to a website, etc.\n\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nnp.random.seed(0)\n\n# Time spans 13 years with daily data points\ntime = np.arange(0, 365*5)\ntrend = time * 0.02  # Adjusted linear trend\n\n# Seasonality: annual cycle\nseasonality_amplitude = 10\nseasonality = seasonality_amplitude * np.sin(time * 2 * np.pi / 365)\n\n# Cyclicality: roughly 3-year cycle\ncyclical_amplitude = 20\ncyclical = cyclical_amplitude * np.sin(time * 2 * np.pi / (365*3))\n\n# Noise\nnoise_amplitude = 5\nnoise = noise_amplitude * np.random.normal(0, 1, time.shape)\n\n# Combine all components\ntime_series = trend + seasonality + cyclical + noise\n\n# Convert to pandas series for easier plotting\ntime_series = pd.Series(time_series, index=pd.date_range(\"2023-01-01\", periods=time.shape[0]))\n\n# Plot the time series\nplt.figure(figsize=(14, 7))\ntime_series.plot()\nplt.title('Synthetic Time Series Data with Trend, Seasonality, and Cyclicality')\nplt.xlabel('Year')\nplt.ylabel('Value')\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](post_files/figure-html/cell-3-output-1.png){width=1117 height=597}\n:::\n:::\n\n\nNow to make time series data a predictable task, we need to be able to decompose the pattern of the data into its components. There are four primary components of a time series: trend, seasonality, cyclicality, and noise. \n\n- Trend: The trend in a time series refers to its long-term movement. It's the general direction in which data seems to be heading over an extended period. Imagine a scenario where the demand for online courses is analyzed. If there's a steady increase in enrollments over several years, this upward trajectory is termed as a positive trend. Conversely, if enrollments decrease steadily, it would be a negative trend.\n\n- Seasonality: Seasonality represents regular fluctuations in a time series that occur at consistent intervals. These intervals could be daily, monthly, or annually. In the context of our online courses example, there might be spikes in enrollment at the beginning of every semester, or perhaps during winter and summer breaks when students have more free time. These predictable and repeating patterns each year signify seasonality.\n\n- Cyclicality: While seasonality is fixed and predictable, cyclicality is more variable. Cyclicality refers to patterns that arise typically due to broader economic conditions and might not have a fixed period. These cycles might last more than a year. For instance, an economic recession might lead to a decrease in discretionary spending and hence fewer enrollments in extra online courses. Once the economy recovers, enrollments might increase again.\n\n- Noise: Noise is the random variation in the time series data that cannot be attributed to the trend, seasonality, or cyclicality. It's essentially the 'background chatter' in your data, which doesn't have any discernible pattern or regularity. In the context of online course enrollments, noise could arise from various unpredictable factors, like a sudden, short-lived popularity of a specific course due to a celebrity mention or a temporary technical glitch leading to decreased enrollments for a few days.\n\n## Moving Average Smoothing\n\nMoving Average Smoothing is a technique used to reduce noise and reveal underlying patterns in time series data. It works by averaging a fixed number of consecutive values in the series.\n\nMathematically, for a time series \\( y_t \\), the moving average \\( \\hat{y}_t \\) is given by:\n\n$$\n\\hat{y}_t = \\frac{1}{k} \\sum_{i=-m}^{m} y_{t+i}\n$$\n\nWhere:\n\n- $k$ is the window size, given by $k = 2m + 1$\n- $m$ is the number of observations before and after $t$ (excluding $t$ itself)\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Create synthetic toy data\nnp.random.seed(42)\ntime = np.arange(0, 100)\ny = 5 + 0.3*time + 10*np.sin(0.1*time) + np.random.normal(0, 3, size=len(time))\n\n# Moving average smoothing function\ndef moving_average(data, window_size, center=True):\n    if center:\n        return pd.Series(data).rolling(window=window_size, center=True).mean().values\n    else:\n        return pd.Series(data).rolling(window=window_size, center=False).mean().values\n\n# Apply moving average smoothing\ny_smoothed_center = moving_average(y, window_size=5, center=True)\ny_smoothed_no_center = moving_average(y, window_size=5, center=False)\n\n# Plot\nplt.figure(figsize=(12, 6))\nplt.plot(time, y, label='Original Data', color='blue')\nplt.plot(time, y_smoothed_center, label='Moving Average (Center=True)', color='red', linestyle='--')\nplt.plot(time, y_smoothed_no_center, label='Moving Average (Center=False)', color='green', linestyle='-.')\nplt.legend()\nplt.title('Moving Average Smoothing on Synthetic Toy Data')\nplt.xlabel('Time')\nplt.ylabel('Value')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](post_files/figure-html/cell-4-output-1.png){width=957 height=523}\n:::\n:::\n\n\n",
    "supporting": [
      "post_files"
    ],
    "filters": [],
    "includes": {}
  }
}